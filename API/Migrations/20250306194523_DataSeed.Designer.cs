// <auto-generated />
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AssignmentDbContext))]
    [Migration("20250306194523_DataSeed")]
    partial class DataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubTopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubTopicId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "images/questions11.jpg",
                            SubTopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "images/questions12.jpg",
                            SubTopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "images/questions13.jpg",
                            SubTopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "images/questions14.jpg",
                            SubTopicId = 1
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "images/questions25.jpg",
                            SubTopicId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "images/questions26.jpg",
                            SubTopicId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "images/questions27.jpg",
                            SubTopicId = 2
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "images/questions28.jpg",
                            SubTopicId = 2
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "images/questions39.jpg",
                            SubTopicId = 3
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "images/questions410.jpg",
                            SubTopicId = 4
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "images/questions511.jpg",
                            SubTopicId = 5
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "images/questions612.jpg",
                            SubTopicId = 6
                        });
                });

            modelBuilder.Entity("API.Entities.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCorrectOption")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "I think you have counted down rather than up. You can use a number line to help you.",
                            IsCorrectOption = false,
                            Label = "A",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "The correct sequence is \n -16, -13, -10, -7, -4",
                            IsCorrectOption = true,
                            Label = "B",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Incorrect due to...",
                            IsCorrectOption = false,
                            Label = "C",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "It's a wrong answer",
                            IsCorrectOption = false,
                            Label = "D",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "I think you have counted down rather than up. You can use a number line to help you.",
                            IsCorrectOption = false,
                            Label = "A",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Incorrect due to...",
                            IsCorrectOption = false,
                            Label = "B",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "The correct sequence is \n -16, -13, -10, -7, -4",
                            IsCorrectOption = true,
                            Label = "C",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "It's a wrong answer",
                            IsCorrectOption = false,
                            Label = "D",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "I think you have counted down rather than up. You can use a number line to help you.",
                            IsCorrectOption = false,
                            Label = "A",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Incorrect due to...",
                            IsCorrectOption = false,
                            Label = "B",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "The correct sequence is \n -16, -13, -10, -7, -4",
                            IsCorrectOption = true,
                            Label = "C",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "It's a wrong answer",
                            IsCorrectOption = false,
                            Label = "D",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            Description = "I think you have counted down rather than up. You can use a number line to help you.",
                            IsCorrectOption = false,
                            Label = "A",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 14,
                            Description = "Incorrect due to...",
                            IsCorrectOption = false,
                            Label = "B",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 15,
                            Description = "The correct sequence is \n -16, -13, -10, -7, -4",
                            IsCorrectOption = true,
                            Label = "C",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 16,
                            Description = "It's a wrong answer",
                            IsCorrectOption = false,
                            Label = "D",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 17,
                            Description = "I think you have counted down rather than up. You can use a number line to help you.",
                            IsCorrectOption = false,
                            Label = "A",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 18,
                            Description = "Incorrect due to...",
                            IsCorrectOption = false,
                            Label = "B",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 19,
                            Description = "Try Again",
                            IsCorrectOption = false,
                            Label = "C",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 20,
                            Description = "Correct",
                            IsCorrectOption = true,
                            Label = "D",
                            QuestionId = 12
                        });
                });

            modelBuilder.Entity("API.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("API.Entities.StudentAssignment", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ChosenOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.HasKey("QuestionId", "StudentId");

                    b.HasIndex("ChosenOptionId");

                    b.ToTable("StudentAssignments");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            StudentId = 1,
                            ChosenOptionId = 1,
                            IsValid = false
                        },
                        new
                        {
                            QuestionId = 2,
                            StudentId = 1,
                            ChosenOptionId = 8,
                            IsValid = false
                        },
                        new
                        {
                            QuestionId = 3,
                            StudentId = 1,
                            ChosenOptionId = 11,
                            IsValid = true
                        },
                        new
                        {
                            QuestionId = 5,
                            StudentId = 1,
                            ChosenOptionId = 16,
                            IsValid = false
                        },
                        new
                        {
                            QuestionId = 12,
                            StudentId = 1,
                            ChosenOptionId = 19,
                            IsValid = false
                        },
                        new
                        {
                            QuestionId = 1,
                            StudentId = 2,
                            ChosenOptionId = 2,
                            IsValid = true
                        },
                        new
                        {
                            QuestionId = 2,
                            StudentId = 2,
                            ChosenOptionId = 8,
                            IsValid = false
                        },
                        new
                        {
                            QuestionId = 3,
                            StudentId = 2,
                            ChosenOptionId = 12,
                            IsValid = false
                        });
                });

            modelBuilder.Entity("API.Entities.SubTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("SubTopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fraction",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Decimals",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Factors",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Multiples",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Primes",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fractions",
                            TopicId = 2
                        });
                });

            modelBuilder.Entity("API.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Number"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Algebra"
                        });
                });

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.HasOne("API.Entities.SubTopic", "SubTopic")
                        .WithMany("Questions")
                        .HasForeignKey("SubTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTopic");
                });

            modelBuilder.Entity("API.Entities.QuestionOption", b =>
                {
                    b.HasOne("API.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Entities.StudentAssignment", b =>
                {
                    b.HasOne("API.Entities.QuestionOption", "ChosenOption")
                        .WithMany()
                        .HasForeignKey("ChosenOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChosenOption");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Entities.SubTopic", b =>
                {
                    b.HasOne("API.Entities.Topic", "Topic")
                        .WithMany("SubTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("API.Entities.SubTopic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("API.Entities.Topic", b =>
                {
                    b.Navigation("SubTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
